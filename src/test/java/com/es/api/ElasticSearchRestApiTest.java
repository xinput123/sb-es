package com.es.api;import com.alibaba.fastjson.JSON;import com.es.EsApp;import com.es.entity.User;import com.es.service.UserService;import org.junit.Assert;import org.junit.FixMethodOrder;import org.junit.Test;import org.junit.runner.RunWith;import org.junit.runners.MethodSorters;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@RunWith(SpringRunner.class)@FixMethodOrder(MethodSorters.NAME_ASCENDING)@SpringBootTest(classes = EsApp.class)public class ElasticSearchRestApiTest {    @Autowired    private ElasticSearchRestApi elasticSearchRestApi;    @Autowired    private UserService userService;    private static final String TEST_INDEX = "test_user";    private Map<String, Map<String, Object>> mockProperties() {        Map<String, Object> map = new HashMap<>();        map.put("type", "text");        Map<String, Map<String, Object>> propertiesMap = new HashMap<>();        propertiesMap.put("name", map);        return propertiesMap;    }    @Test    public void testCreateIndex() throws IOException {        // 创建索引        elasticSearchRestApi.createIndex(TEST_INDEX, this.mockProperties());    }    @Test    public void existIndex() throws IOException {        boolean existIndex = elasticSearchRestApi.existIndex(TEST_INDEX);        // 验证结果        Assert.assertTrue(existIndex);    }    @Test    public void testDeleteIndex() throws IOException {        // 删除索引        elasticSearchRestApi.deleteIndex(TEST_INDEX);        boolean existIndex = elasticSearchRestApi.existIndex(TEST_INDEX);        // 验证结果        Assert.assertFalse(existIndex);    }    @Test    public void addData() {        User user = new User();        user.setId(1001);        user.setName("xinput-1001");        user.setAge(1);        user.setEmail("1001@qq.com");        userService.save(user);    }    @Test    public void batchAdd() {        List<User> users = new ArrayList<>(100);        for (int i = 1002; i < 1100; i++) {            User user = new User();            user.setId(i);            user.setName("xinput-" + i);            user.setAge(i % 100);            user.setEmail(i + "@qq.com");            users.add(user);        }        userService.saveAllUser(users);    }    @Test    public void getUserById() {        User user = userService.getUser("1001");        System.out.println(JSON.toJSONString(user, true));    }    @Test    public void getUserByIds() {        List<User> users = userService.searchUserByName("xinput");        System.out.println(JSON.toJSONString(users, true));    }}