package com.es.api;import com.alibaba.fastjson.JSON;import com.es.exception.NotFoundException;import com.es.exception.ServiceException;import org.elasticsearch.ElasticsearchException;import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;import org.elasticsearch.action.bulk.BulkRequest;import org.elasticsearch.action.delete.DeleteRequest;import org.elasticsearch.action.get.GetRequest;import org.elasticsearch.action.get.GetResponse;import org.elasticsearch.action.index.IndexRequest;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.action.support.master.AcknowledgedResponse;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.client.indices.CreateIndexRequest;import org.elasticsearch.client.indices.CreateIndexResponse;import org.elasticsearch.client.indices.GetIndexRequest;import org.elasticsearch.common.xcontent.XContentBuilder;import org.elasticsearch.common.xcontent.XContentFactory;import org.elasticsearch.common.xcontent.XContentType;import org.elasticsearch.index.query.QueryBuilder;import org.elasticsearch.index.reindex.DeleteByQueryRequest;import org.elasticsearch.rest.RestStatus;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.aggregations.Aggregations;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Map;@Servicepublic class ElasticSearchRestApi {    private static final int DEFAULT_SHARDS = 3;    private static final int DEFAULT_REPLICAS = 1;    @Autowired    private RestHighLevelClient restHighLevelClient;    /**     * 创建索引     *     * @param index      索引     * @param properties 文档属性集合     * @return 返回true，表示创建成功     * @throws IOException Rest Client 请求异常     */    public boolean createIndex(String index, Map<String, Map<String, Object>> properties) throws IOException {        /**         * ElaticSearch 7.x 的版本中已经废弃了 mapping，弃用了 type，也就是一个 index 相当于一个表。         * 详情见官方文档 映射类型 https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html         *         * 以下是关于 ElaticSearch 7.x 的映射类型描述：         * 1、不建议在请求中指定类型。例如，为文档建立索引不再不需要 document type。新索引API适用 PUT {index}/_doc/{id} 于         *    显示ID和 POST {index}/_doc 自动生成的ID。请注意，在7.0中，它 _doc 是路径永久的部分，并且表示端点名称而不是文档类型         *         * 2、将 include_type_name 在创建索引，索引模板，地图API参数默认为false。完全设置该参数将导致弃用警告         *         * 3、_default_ 映射类型被去除         */        XContentBuilder builder = XContentFactory.jsonBuilder();        // ES 7 中弃用了type        builder.startObject()//                .startObject("mappings")//                .field("properties", properties).endObject()                .startObject("settings")                .field("number_of_shards", DEFAULT_SHARDS)                .field("number_of_replicas", DEFAULT_REPLICAS)                .endObject()                .endObject();        CreateIndexRequest request = new CreateIndexRequest(index).source(builder);        CreateIndexResponse response = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);        return response.isAcknowledged();    }    /**     * 判断索引是否存在     *     * @param index 索引     * @return 返回true 表示存在     * @throws IOException Rest Client 请求异常     */    public boolean existIndex(String index) throws IOException {        GetIndexRequest getIndexRequest = new GetIndexRequest(index);        getIndexRequest.local(false);        getIndexRequest.humanReadable(true);        getIndexRequest.includeDefaults(false);        return restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);    }    /**     * 删除索引     *     * @param index 索引     * @return 返回true，表示删除成功     * @throws IOException Rest Client 请求异常     */    public boolean deleteIndex(String index) throws IOException {        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(index);        try {            AcknowledgedResponse response = restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);            return response.isAcknowledged();        } catch (ElasticsearchException e) {            if (e.status() == RestStatus.NOT_FOUND) {                throw new NotFoundException("Not found index: " + index);            }            throw e;        }    }    /**     * 保存文档: 如果文档存在，则更新文档；如果文档不存在，则保存文档。     *     * @param index    索引     * @param document 文档数据     * @throws IOException Rest Client 请求异常     */    public void save(String index, ElasticSearchDocument<?> document) throws IOException {        IndexRequest indexRequest = new IndexRequest(index);        indexRequest.id(document.getId());        indexRequest.source(JSON.toJSONString(document.getData()), XContentType.JSON);        // 保存文档数据        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);    }    /**     * 批量保存文档     *     * @param index     索引     * @param documents 文档集合     * @param <T>       数据类型     * @throws IOException Rest Client 请求异常     */    public <T> void saveAll(String index, List<ElasticSearchDocument<T>> documents) throws IOException {        if (CollectionUtils.isEmpty(documents)) {            return;        }        // 批量请求        BulkRequest bulkRequest = new BulkRequest();        documents.forEach(doc -> bulkRequest.add(new IndexRequest(index)                .id(doc.getId())                .source(JSON.toJSONString(doc.getData()), XContentType.JSON)));        restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);    }    /**     * 根据文档Id删除文档数据     *     * @param index 索引     * @param docId 文档ID     * @throws IOException Rest Client 请求异常     */    public void delete(String index, String docId) throws IOException {        DeleteRequest deleteRequest = new DeleteRequest(index, docId);        restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);    }    /**     * 根据条件删除文档     *     * @param index        索引     * @param queryBuilder 查询条件构造器     * @throws IOException Rest Client 请求异常     */    public void deleteByQuery(String index, QueryBuilder queryBuilder) throws IOException {        DeleteByQueryRequest deleteRequest = new DeleteByQueryRequest(index).setQuery(queryBuilder);        deleteRequest.setConflicts("proceed");        restHighLevelClient.deleteByQuery(deleteRequest, RequestOptions.DEFAULT);    }    /**     * 根据文档Id批量删除文档数据     *     * @param index  索引     * @param docIds 文档ID集合     * @throws IOException Rest Client 请求异常     */    public void deleteAll(String index, List<String> docIds) throws IOException {        if (CollectionUtils.isEmpty(docIds)) {            return;        }        BulkRequest bulkRequest = new BulkRequest();        docIds.forEach(docId -> bulkRequest.add(new DeleteRequest(index, docId)));        restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);    }    /**     * 根据索引和文档Id获取数据     *     * @param index      索引     * @param id         文档ID     * @param resultType 返回 resultType 类型的数据     * @param <T>        数据类型     * @return     * @throws IOException Rest Client 请求异常     */    public <T> T get(String index, String id, Class<T> resultType) throws IOException {        GetRequest getRequest = new GetRequest(index, id);        GetResponse getResponse = restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);        return JSON.parseObject(getResponse.getSourceAsString(), resultType);    }    /**     * 条件查询     *     * @param index         索引     * @param sourceBuilder 条件查询构造器     * @param <T>           数据类型     * @return List<T> 类型的集合     * @throws IOException Rest Client 请求异常     */    public <T> List<T> searchByQuery(String index, SearchSourceBuilder sourceBuilder, Class<T> resultType) throws IOException {        // 构建查询请求        SearchRequest searchRequest = new SearchRequest(index).source(sourceBuilder);        // 获取返回值        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);        SearchHit[] hits = searchResponse.getHits().getHits();        // 创建空的查询结果集合        List<T> results = new ArrayList<>(hits.length);        for (SearchHit hit : hits) {            // 以字符串的形式获取数据源            String sourceAsString = hit.getSourceAsString();            results.add(JSON.parseObject(sourceAsString, resultType));        }        return results;    }    /**     * 获取聚合数据     *     * @param searchSourceBuilder 条件查询构建器     * @param indices             索引     * @return 返回聚合集合     */    public Aggregations searchAggs(SearchSourceBuilder searchSourceBuilder, String... indices) {        try {            SearchRequest searchRequest = new SearchRequest(indices).source(searchSourceBuilder);            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);            return searchResponse.getAggregations();        } catch (IOException e) {            throw new ServiceException("ElasticSearch client exception");        }    }}